import numpy as np
import joblib

class TextClassifier:

    def __init__(self, model_path: str, tokenizer_path: str):
        self.model = joblib.load(model_path)
        self.word2vec_model = joblib.load(tokenizer_path)

    def _document_to_vector(self, doc: list) -> np.array:
        vectors = [self.word2vec_model.wv[word] for word in doc if word in self.word2vec_model.wv.index_to_key]
        if vectors:
            return np.mean(vectors, axis=0)
        else:
            return np.zeros(self.word2vec_model.vector_size)

    def predict(self, text: str) -> dict:
        vectorized_text = np.array([self._document_to_vector(text.split())])
        predicted_class = self.model.predict(vectorized_text)[0]
        
        probability_gpt = self.model.predict_proba(vectorized_text)[0][1]
        probability_human = 1 - probability_gpt
        probability_human_percentage = probability_human * 100
        probability_gpt_percentage = probability_gpt * 100

        prediction_statement = (f"The text has a {probability_human_percentage:.2f}% chance of being written by a 'human' "
                                f"and a {probability_gpt_percentage:.2f}% chance of being generated by 'gpt'.")

        if probability_gpt > 0.6:
            opinion = "The text is most likely generated by 'gpt'."
        elif probability_human > 0.6:
            opinion = "The text is most likely written by a 'human'."
        else:
            opinion = "The text has a balanced probability between 'human' and 'gpt', making it challenging to decisively classify."

        return {
            'predicted_class': 'human' if predicted_class == 0 else 'gpt',
            'statement': prediction_statement,
            'opinion': opinion
        }
